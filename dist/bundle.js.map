{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/carve-maze.ts","webpack:///./src/carveable-grid.ts","webpack:///./src/cell.ts","webpack:///./src/coord.ts","webpack:///./src/grid.ts","webpack:///./src/index.ts","webpack:///./src/rand.ts","webpack:///./src/walls.ts"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;;AClFa;AACb,8CAA8C,cAAc;AAC5D,yBAAyB,mBAAO,CAAC,iDAAkB;AACnD,eAAe,mBAAO,CAAC,6BAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACrDa;AACb,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC9Ba;AACb,8CAA8C,cAAc;AAC5D,gBAAgB,mBAAO,CAAC,+BAAS;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC/Ba;AACb,8CAA8C,cAAc;AAC5D;AACA;AACA,kCAAkC,SAAS,GAAG,SAAS;AACvD;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACTa;AACb,8CAA8C,cAAc;AAC5D,gBAAgB,mBAAO,CAAC,+BAAS;AACjC,eAAe,mBAAO,CAAC,6BAAQ;AAC/B,eAAe,mBAAO,CAAC,6BAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,YAAY;AACrC;AACA,6BAA6B,YAAY;AACzC;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACrDa;AACb,8CAA8C,cAAc;AAC5D,eAAe,mBAAO,CAAC,6BAAQ;AAC/B,qBAAqB,mBAAO,CAAC,yCAAc;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACpBa;AACb,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACNa;AACb,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/index.ts\");\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst carveable_grid_1 = require(\"./carveable-grid\");\nconst rand_1 = require(\"./rand\");\nfunction carveMaze(grid) {\n    const cell = grid.getRandCell();\n    cell.markStart();\n    const carveableGrid = carveable_grid_1.carveGridFactory(grid);\n    carve(carveableGrid, [cell]);\n}\nexports.carveMaze = carveMaze;\nconst getOppositeDirection = direction => {\n    if (direction === 'north') {\n        return 'south';\n    }\n    else if (direction === 'east') {\n        return 'west';\n    }\n    else if (direction === 'south') {\n        return 'north';\n    }\n    return 'east';\n};\nfunction carve(carveableGrid, history) {\n    const cell = history[history.length - 1];\n    // get list of walls not carved yet, that point to adjacent cells that have not been visited yet\n    const walls = carveableGrid.getAvailableCellWalls(cell, cell.getCoord());\n    // get random wall from results\n    if (walls.length === 0) {\n        if (history.length >= 2) {\n            const backtrackedCell = history.pop();\n            if (backtrackedCell) {\n                backtrackedCell.markPopped();\n            }\n            carve(carveableGrid, history);\n            return;\n        }\n        return;\n    }\n    const wallIndex = rand_1.randInRange(0, walls.length);\n    const wall = walls[wallIndex];\n    wall.state = 'carved';\n    cell.markVisited();\n    const adjacentCell = carveableGrid.getAdjacentCell(wall.direction, cell.getCoord());\n    if (adjacentCell) {\n        if (!adjacentCell.isVisited()) {\n            const oppDir = getOppositeDirection(wall.direction);\n            adjacentCell.getWalls()[oppDir].state = 'carved';\n            adjacentCell.markVisited();\n            history.push(adjacentCell);\n            carve(carveableGrid, history);\n        }\n    }\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass CarveableGrid {\n    constructor(grid) {\n        this.getCell = (coord) => this.grid.getCell(coord);\n        this.getAdjacentCell = (direction, coord) => this.grid.getAdjacentCell(direction, coord);\n        this.getAvailableCellWalls = (cell, cellCoord) => {\n            // available cell walls are walls that have not been carved and that are adjacent to a cell\n            // that has not been visited\n            const walls = cell.getWalls();\n            const results = [];\n            walls.forEach((direction, wall) => {\n                if (wall.state === 'solid') {\n                    const adjacentCell = this.grid.getAdjacentCell(direction, cellCoord);\n                    if (adjacentCell && !adjacentCell.isVisited()) {\n                        results.push(wall);\n                    }\n                }\n            });\n            return results;\n        };\n        this.forEachRow = (cb) => {\n            this.grid.forEachRow(cb);\n        };\n        this.grid = grid;\n    }\n}\nfunction carveGridFactory(grid) {\n    return new CarveableGrid(grid);\n}\nexports.carveGridFactory = carveGridFactory;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst walls_1 = require(\"./walls\");\nclass Cell {\n    constructor(coord) {\n        this.walls = walls_1.wallsFactory();\n        this.visited = false;\n        this.start = false;\n        this.isPopped = () => this.popped;\n        this.markPopped = () => (this.popped = true);\n        this.getWalls = () => this.walls;\n        this.markVisited = () => (this.visited = true);\n        this.markStart = () => (this.start = true);\n        this.isStart = () => this.start;\n        this.isVisited = () => this.visited;\n        this.getOppositeWall = (wall) => {\n            if (wall === 0) {\n                return 2;\n            }\n            else if (wall === 1) {\n                return 3;\n            }\n            else if (wall === 2) {\n                return 0;\n            }\n            return 1;\n        };\n        this.getCoord = () => this.coord;\n        this.coord = coord;\n    }\n}\nexports.cellFactory = (coord) => new Cell(coord);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass Coord {\n    constructor(row, col) {\n        this.toString = () => `[${this.row},${this.col}]`;\n        this.row = row;\n        this.col = col;\n    }\n}\nexports.coordFactory = (row, col) => new Coord(row, col);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst coord_1 = require(\"./coord\");\nconst cell_1 = require(\"./cell\");\nconst rand_1 = require(\"./rand\");\nclass Grid {\n    constructor(rows, cols) {\n        this.forEachRow = (cb) => {\n            this.cells.forEach((row, rowIndex) => {\n                cb(row, rowIndex);\n            });\n        };\n        this.getCell = (coord) => this.cells[coord.row][coord.col];\n        this.getAdjacentCellCoords = (direction, coord) => {\n            switch (direction) {\n                case 'north':\n                    return coord_1.coordFactory(coord.row - 1, coord.col);\n                case 'east':\n                    return coord_1.coordFactory(coord.row, coord.col + 1);\n                case 'south':\n                    return coord_1.coordFactory(coord.row + 1, coord.col);\n                case 'west':\n                    return coord_1.coordFactory(coord.row, coord.col - 1);\n            }\n            return coord_1.coordFactory(-1, -1);\n        };\n        this.getAdjacentCell = (direction, coord) => {\n            const adjacentCoords = this.getAdjacentCellCoords(direction, coord);\n            return this.coordInBounds(adjacentCoords)\n                ? this.getCell(adjacentCoords)\n                : undefined;\n        };\n        this.rowInBounds = (row) => row >= 0 && row < this.rows;\n        this.colInBounds = (col) => col >= 0 && col < this.cols;\n        this.coordInBounds = (coord) => {\n            return this.rowInBounds(coord.row) && this.colInBounds(coord.col);\n        };\n        this.getRandCoord = () => coord_1.coordFactory(rand_1.randInRange(0, this.rows - 1), rand_1.randInRange(0, this.cols - 1));\n        this.getRandCell = () => {\n            const coord = this.getRandCoord();\n            return this.cells[coord.row][coord.col];\n        };\n        this.rows = rows;\n        this.cols = cols;\n        this.cells = [];\n        for (let row = 0; row < rows; row++) {\n            this.cells[row] = [];\n            for (let col = 0; col < cols; col++) {\n                this.cells[row][col] = cell_1.cellFactory(coord_1.coordFactory(row, col));\n            }\n        }\n    }\n}\nexports.gridFactory = (rows, cols) => new Grid(rows, cols);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst grid_1 = require(\"./grid\");\nconst carve_maze_1 = require(\"./carve-maze\");\nclass MazeGen {\n    constructor(options) {\n        this.generate = () => carve_maze_1.carveMaze(grid_1.gridFactory(this.rows, this.cols));\n        if (!options.rows) {\n            throw new Error('rows is required');\n        }\n        if (!options.cols) {\n            throw new Error('cols is required');\n        }\n        this.rows = options.rows;\n        this.cols = options.cols;\n    }\n}\nexports.mazeGenerator = (options) => {\n    const mazeGen = new MazeGen(options);\n    return mazeGen.generate();\n};\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.randInRange = (min, max) => {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min)) + min;\n};\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass Wall {\n    constructor(direction) {\n        this.state = 'solid';\n        this.direction = direction;\n    }\n}\nexports.Wall = Wall;\nconst wallFactory = (direction) => new Wall(direction);\n// const Walls = {\n//   north: wallFactory(),\n//   east: wallFactory(),\n//   south: wallFactory(),\n//   west: wallFactory(),\n//   forEach: (cb: (direction: Direction, wall: Wall) => void) => {\n//     Object.keys(this).forEach((direction: Direction) => {\n//       cb(direction, this[direction])\n//     })\n//   }\n// }\nclass Walls {\n    constructor() {\n        this.walls = {\n            north: wallFactory('north'),\n            east: wallFactory('east'),\n            south: wallFactory('south'),\n            west: wallFactory('west')\n        };\n        this.forEach = (cb) => {\n            Object.keys(this.walls).forEach((direction) => {\n                cb(direction, this.walls[direction]);\n            });\n        };\n        this.north = this.walls.north;\n        this.east = this.walls.east;\n        this.south = this.walls.south;\n        this.west = this.walls.west;\n    }\n}\nexports.wallsFactory = () => new Walls();\n"],"sourceRoot":""}